<?php

namespace jpuck\avhost\Core\Utils;

use jpuck\avhost\Core\Contracts\Exportable;
use jpuck\avhost\Core\Traits\EncodeFromArray;
use jpuck\avhost\Core\Configuration;

class Signature implements Exportable
{
    use EncodeFromArray;

    protected $configuration;
    protected $version;
    protected $createdAt;
    protected $createdBy;

    protected $header = <<<HEADER
##########################################
# Generated by avhost
# https://github.com/jpuck/avhost

HEADER;

    protected $footer = <<<FOOTER
##########################################

FOOTER;

    public function __construct()
    {
        $this->setDefaultValues();
    }

    public function getConfiguration() : Configuration
    {
        return $this->configuration;
    }

    public function setConfiguration($configuration) : Signature
    {
        if (!$configuration instanceof Configuration) {
            $configuration = Configuration::createFromArray($configuration);
        }

        $this->configuration = $configuration;

        return $this;
    }

    public function getVersion() : string
    {
        return $this->version;
    }

    public function setVersion(string $version) : Signature
    {
        $this->version = $version;

        return $this;
    }

    public function getCreatedAt() : string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt) : Signature
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getCreatedBy() : string
    {
        return $this->createdBy;
    }

    public function setCreatedBy(string $createdBy) : Signature
    {
        $this->createdBy = $createdBy;

        return $this;
    }

    public function setDefaultValues()
    {
        $this->setVersion((new Version)->getVersion());

        $this->setCreatedAt(date('c'));

        $this->setCreatedBy(trim(`whoami`).'@'.gethostname());
    }

    public function toArray() : array
    {
        return [
            'version' => $this->getVersion(),
            'createdAt' => $this->getCreatedAt(),
            'createdBy' => $this->getCreatedBy(),
        ];
    }

    public function render() : string
    {
        $string = '';
        foreach ($this->toArray() as $key => $value) {
            $string .= $this->getKeyValueLine($key, $value);
        }

        $contentHash = $this->getConfiguration()->getContentHash();
        $string .= $this->getKeyValueLine('contentHash', $contentHash);

        $configuration = $this->getConfiguration()->toBase64();
        $string .= $this->getKeyValueLine('configuration', $configuration);

        return $this->header . $string . $this->footer;
    }

    public function getKeyValueLine(string $key, string $value) : string
    {
        return "# $key $value".PHP_EOL;
    }
}
